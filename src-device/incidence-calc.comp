#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (constant_id = 0) const int NUM_POINTS = 100;
layout (local_size_x_id = 1) in;

layout(set=0, binding = 0) uniform GlobalInput
{
	// This orientation is given as a normalized quaternion,
	// where the scalar component is w.
	vec4 to_sun_rotation;

	// Vector point to sun in the sky, scaled with the
	// energy times integration factor.
	vec3 dir_energy;
};

layout(set=1, binding = 0) uniform sampler2D depth_map;

struct Point
{
	vec4 position;
	vec4 normal;
};

layout(std430, set=1, binding = 1) buffer Input
{
	Point point[NUM_POINTS];
};

layout(std430, set=1, binding = 2) buffer Output
{
	vec4 incidence[NUM_POINTS];
};

#include "quaternion.glsl"

void main()
{
	if(gl_GlobalInvocationID.x >= NUM_POINTS) {
		return;
	}

	// Tolerance to account for texture sampling interpolation
	// error (which must be set to linear, not nearest).
	const float tol = 1e-4;

	const Point p = point[gl_GlobalInvocationID.x];

	// Rotate the point to sun's standpoint,
	// and normalize coordinates:
	vec3 pos = 0.5 * quat_rot_vec(
		to_sun_rotation,
		p.position.xyz
	) + vec3(0.5, 0.5, 0.5);

	// Depth test
	float visible_dist = texture(depth_map, pos.xy).r;
	if(pos.z <= (visible_dist + tol)) {
		// Point is exposed, accumulate direct solar incidence.

		// Check if sun is inciding from behing.
		// This is a precaution, because points facing
		// outwards the sun should never be exposed.
		// TODO: test if this is really needed and remove,
		// because it is expensive and requires normal input.
		if(dot(dir_energy, p.normal.xyz) > 0) {
			incidence[gl_GlobalInvocationID.x].xyz += dir_energy;
		}
	}
}
